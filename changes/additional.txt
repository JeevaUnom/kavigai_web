about kavigai 
 
 // Expanded(
          //   child: Padding(
          //     padding: const EdgeInsets.all(8.0),
          //     child: Center(
          //       child: SizedBox(
          //         width: MediaQuery.of(context).size.width *
          //             0.8, // 80% of screen width
          //         child: const Column(
          //           crossAxisAlignment: CrossAxisAlignment.stretch,
          //           children: [
          //             SizedBox(height: 20),
          //             Text(
          //               "Kavigai is your go-to web app for student goal setting and mentorship. Our platform helps students define their goals and connect with mentors who can guide them along the way. Set goals, find mentors, and achieve success with Kavigai.",
          //               textAlign: TextAlign.center,
          //               style: TextStyle(
          //                 fontSize: 20,
          //                 fontWeight: FontWeight.bold,
          //               ),
          //             ),
          //             SizedBox(height: 20),
          //           ],
          //         ),
          //       ),
          //     ),
          //   ),
          // ),


          home page

          // ignore_for_file: file_names

import 'package:flutter/material.dart';
import '../components/navbar.dart'; // Import the NavBar file
import 'package:intl/intl.dart';

class HomePage extends StatefulWidget {
  const HomePage({Key? key});

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final TextEditingController _todoController = TextEditingController();
  final List<TodoItem> _todos = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home Page'),
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Add the NavBar at the top of the Page
          const NavBar(),

          Expanded(
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _todoController,
                          decoration: const InputDecoration(
                            hintText: 'Enter a new task',
                          ),
                        ),
                      ),
                      IconButton(
                        icon: const Icon(Icons.add),
                        onPressed: () {
                          setState(() {
                            _todos.add(TodoItem(
                              _todoController.text,
                              targetDate:
                                  DateTime.now(), // Provide a target date here
                            ));
                            _todoController.clear();
                          });
                        },
                      ),
                    ],
                  ),
                ),
                Expanded(
                  child: ReorderableListView(
                    onReorder: (oldIndex, newIndex) {
                      setState(() {
                        if (oldIndex < newIndex) {
                          newIndex -= 1;
                        }
                        final TodoItem item = _todos.removeAt(oldIndex);
                        _todos.insert(newIndex, item);
                      });
                    },
                    children: _todos
                        .asMap()
                        .map((index, todo) => MapEntry(
                              index,
                              TodoListItem(
                                key: ValueKey(todo),
                                todo: todo,
                                serialNumber: index + 1,
                                onDelete: () {
                                  setState(() {
                                    _todos.removeAt(index);
                                  });
                                },
                                onUpdate: (String newText) {
                                  setState(() {
                                    _todos[index].text = newText;
                                  });
                                },
                                onToggleStatus: () {
                                  setState(() {
                                    _todos[index].toggleStatus();
                                  });
                                },
                                onUpdateTargetDate: (DateTime newDate) {
                                  setState(() {
                                    _todos[index].updateTargetDate(newDate);
                                  });
                                },
                              ),
                            ))
                        .values
                        .toList(),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class TodoItem {
  String text;
  bool isDone;
  DateTime targetDate;

  TodoItem(this.text, {this.isDone = false, required this.targetDate});

  void toggleStatus() {
    isDone = !isDone;
  }

  void updateTargetDate(DateTime newDate) {
    targetDate = newDate;
  }
}

class TodoListItem extends StatelessWidget {
  final TodoItem todo;
  final VoidCallback onDelete;
  final ValueChanged<String> onUpdate;
  final VoidCallback onToggleStatus;
  // final VoidCallback onUpdateTargetDate;
  final Function(DateTime) onUpdateTargetDate;
  final int serialNumber;

  const TodoListItem({
    required Key key,
    required this.todo,
    required this.serialNumber,
    required this.onDelete,
    required this.onUpdate,
    required this.onToggleStatus,
    required this.onUpdateTargetDate,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    DateTime selectedDate = todo.targetDate;

    return ListTile(
      key: ValueKey(todo),
      title: todo.isDone
          ? Text(
              todo.text,
              style: const TextStyle(decoration: TextDecoration.lineThrough),
            )
          : Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(todo.text),
                Text(
                  'Target Date: ${DateFormat('yyyy-MM-dd').format(todo.targetDate)}',
                ),
              ],
            ),
      leading: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Padding(
            padding: const EdgeInsets.only(right: 8.0),
            child: Text(
              '$serialNumber.',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
          ),
          Checkbox(
            value: todo.isDone,
            onChanged: (bool? value) {
              onToggleStatus();
            },
          ),
        ],
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              _showEditDialog(context);
            },
          ),
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: onDelete,
          ),
          IconButton(
            icon: const Icon(Icons.calendar_today),
            onPressed: () {
              _showDatePicker(context, selectedDate);
            },
          ),
        ],
      ),
    );
  }

  void _showDatePicker(BuildContext context, DateTime selectedDate) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime(DateTime.now().year + 1),
    );
    // Check if a new date is picked and it's different from the selected date
    if (pickedDate != null && pickedDate != selectedDate) {
      onUpdateTargetDate(
          pickedDate); // Call the function to update the target date
    }
  }

  Future<void> _showEditDialog(BuildContext context) async {
    TextEditingController editController = TextEditingController();
    editController.text = todo.text;

    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Edit Task'),
          content: TextField(
            controller: editController,
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                onUpdate(editController.text);
                Navigator.pop(context);
              },
              child: const Text('Save'),
            ),
          ],
        );
      },
    );
  }
}
